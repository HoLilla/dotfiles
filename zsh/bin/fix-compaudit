#!/usr/bin/env run-cargo-script
// cargo-deps: regex = "1"

extern crate regex;

use regex::Regex;
use std::env;
use std::process;
use std::process::Command;
use std::str;

fn main() {
    let audit_problems = zsh(&"autoload -U compaudit && compaudit");
    if audit_problems.status.success() {
        process::exit(0);
    }

    let user = env!("USER");
    let stdout = str::from_utf8(&audit_problems.stdout).unwrap().trim();

    for file in stdout.lines() {
        let cmd = format!("gstat -c '%U' \"{}\"", file);
        let owner = zsh(&cmd);

        let owner_stdout = str::from_utf8(&owner.stdout).unwrap();
        if owner_stdout.trim() != user {
            println!("gaining ownership: {}", file);
            let cmd = format!("sudo chown -R \"{}\" \"{}\"", user, file);
            zsh(&cmd);
        }

        let permissions = zsh(&format!("gstat -c '%A' \"{}\"", file));
        let stat_permissions = str::from_utf8(&permissions.stdout).unwrap();
        let regex = Regex::new("(.{2}w.{7}|.{5}w.{4})").unwrap();

        if regex.is_match(stat_permissions) {
            let chmod = format!("chmod -R go-w \"{}\"", file);
            zsh(&chmod);
        }
    }
}

fn zsh(cmd: &str) -> std::process::Output {
    return Command::new("zsh")
        .arg("-c")
        .arg(cmd)
        .output()
        .expect(&format!("failed to execute: {}", cmd));
}
