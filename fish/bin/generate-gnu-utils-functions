#!/usr/bin/env run-cargo-script

use std::fs;
use std::fs::File;
use std::io::prelude::*;
use std::path::Path;

fn main() -> std::io::Result<()> {
    let gnu_utils = vec![
        "[",
        "base64",
        "basename",
        "cat",
        "chcon",
        "chgrp",
        "chmod",
        "chown",
        "chroot",
        "cksum",
        "comm",
        "cp",
        "csplit",
        "cut",
        "date",
        "dd",
        "df",
        "dir",
        "dircolors",
        "dirname",
        "du",
        "echo",
        "env",
        "expand",
        "expr",
        "factor",
        "false",
        "fmt",
        "fold",
        "groups",
        "head",
        "hostid",
        "id",
        "install",
        "join",
        "kill",
        "configure",
        "ln",
        "logname",
        "ls",
        "md5sum",
        "mkdir",
        "mkfifo",
        "mknod",
        "mktemp",
        "mv",
        "nice",
        "nl",
        "nohup",
        "nproc",
        "od",
        "paste",
        "pathchk",
        "pinee",
        "pr",
        "printenv",
        "printf",
        "ptx",
        "pwd",
        "readlink",
        "realpath",
        "rm",
        "rmdir",
        "runcon",
        "seq",
        "sha1sum",
        "sha224sum",
        "sha256sum",
        "sha384sum",
        "sha512sum",
        "shred",
        "shuf",
        "sleep",
        "sort",
        "split",
        "stat",
        "stty",
        "sum",
        "sync",
        "tac",
        "tail",
        "tee",
        "test",
        "timeout",
        "touch",
        "tr",
        "true",
        "truncate",
        "tsort",
        "tty",
        "uname",
        "unexpand",
        "uniq",
        "unlink",
        "uptime",
        "users",
        "vdir",
        "wc",
        "who",
        "whoami",
        "yes",
        "addr2line",
        "ar",
        "c++filt",
        "elfedit",
        "nm",
        "objcopy",
        "objdump",
        "ranlib",
        "readelf",
        "size",
        "strings",
        "strip",
        "find",
        "locate",
        "oldfind",
        "updatedb",
        "xargs",
        "libtool",
        "libtoolize",
        "getopt",
        "grep",
        "indent",
        "sed",
        "tar",
        "time",
        "units",
        "which",
    ];

    let template = fs::read_to_string("fish/gnu-utils.fish.template")
        .expect("Something went wrong reading the file");

    let templated_functions =
        generate_gnu_utils_function(gnu_utils, "g", "fish/functions/", &template)
            .into_iter()
            .filter(|(path, _)| !Path::new(path).exists())
            .collect::<Vec<(String, String)>>();

    for (path, contents) in templated_functions {
        let mut file = File::create(path.to_string()).expect("Creating file failed");
        file.write_all(contents.as_bytes())
            .expect("Failed to write to file");
    }

    Ok(())
}

fn generate_gnu_utils_function(
    gnu_functions: Vec<&str>,
    function_prefix: &str,
    write_directory: &str,
    template: &str,
) -> Vec<(String, String)> {
    return gnu_functions
        .into_iter()
        .map(|gnu_function| {
            let path = Path::new(write_directory).join(format!("{}.fish", gnu_function));
            let path_string = path.to_str().expect("Path generation failed");

            (
                path_string.to_string(),
                template
                    .replace("___GNU_CMD___", gnu_function)
                    .replace(
                        "___PREFIXED_COMMAND___",
                        &format!("{}{}", function_prefix, gnu_function),
                    )
                    .to_string(),
            )
        })
        .collect();
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn generates_a_function() {
        let gnu_functions = vec!["ar"];
        let function_prefix = "g";
        let write_directory = "fish/functions/";
        let template = r#"
function ___GNU_CMD___
    if ! type -q ___PREFIXED_COMMAND___
        command ___GNU_CMD___ $argv
    else
        ___PREFIXED_COMMAND___ $argv
    end
end
"#;

        let actual =
            generate_gnu_utils_function(gnu_functions, function_prefix, write_directory, template);

        assert_eq!(actual[0].0, "fish/functions/ar.fish");
        assert_eq!(
            actual[0].1,
            r#"
function ar
    if ! type -q gar
        command ar $argv
    else
        gar $argv
    end
end
"#
        );
    }

    #[test]
    fn function_name_is_customisable() {
        let template = r#"
function ___GNU_CMD___
    if ! type -q ___PREFIXED_COMMAND___
        command ___GNU_CMD___ $argv
    else
        ___PREFIXED_COMMAND___ $argv
    end
end
"#;
        let gnu_functions = vec!["base64"];
        let function_prefix = "g";
        let write_directory = "fish/functions/";

        let actual =
            generate_gnu_utils_function(gnu_functions, function_prefix, write_directory, template);

        assert_eq!(actual[0].0, "fish/functions/base64.fish");
        assert_eq!(
            actual[0].1,
            r#"
function base64
    if ! type -q gbase64
        command base64 $argv
    else
        gbase64 $argv
    end
end
"#
        );
    }

    #[test]
    fn the_prefix_is_customisable() {
        let template = r#"
function ___GNU_CMD___
    if ! type -q ___PREFIXED_COMMAND___
        command ___GNU_CMD___ $argv
    else
        ___PREFIXED_COMMAND___ $argv
    end
end
"#;
        let gnu_functions = vec!["base64"];
        let function_prefix = "zzzz";
        let write_directory = "fish/functions/";

        let actual: Vec<(String, String)> =
            generate_gnu_utils_function(gnu_functions, function_prefix, write_directory, template);

        assert_eq!(actual[0].0, "fish/functions/base64.fish");
        assert_eq!(
            actual[0].1,
            r#"
function base64
    if ! type -q zzzzbase64
        command base64 $argv
    else
        zzzzbase64 $argv
    end
end
"#
        );
    }

    #[test]
    fn a_list_of_functions_generates_multiple_templates() {
        let template = r#"
function ___GNU_CMD___
    if ! type -q ___PREFIXED_COMMAND___
        command ___GNU_CMD___ $argv
    else
        ___PREFIXED_COMMAND___ $argv
    end
end
"#;
        let gnu_functions = vec!["base64", "whoami"];
        let function_prefix = "g";
        let write_directory = "fish/functions/";

        let actual: Vec<(String, String)> =
            generate_gnu_utils_function(gnu_functions, function_prefix, write_directory, template);

        assert_eq!(actual[0].0, "fish/functions/base64.fish");
        assert_eq!(
            actual[0].1,
            r#"
function base64
    if ! type -q gbase64
        command base64 $argv
    else
        gbase64 $argv
    end
end
"#
        );
        assert_eq!(actual[1].0, "fish/functions/whoami.fish");
        assert_eq!(
            actual[1].1,
            r#"
function whoami
    if ! type -q gwhoami
        command whoami $argv
    else
        gwhoami $argv
    end
end
"#
        );
    }

    #[test]
    fn the_template_is_customisable() {
        let gnu_functions = vec!["ar"];
        let function_prefix = "g";
        let write_directory = "fish/functions/";
        let template = "___GNU_CMD___ ___PREFIXED_COMMAND___";
        let actual =
            generate_gnu_utils_function(gnu_functions, function_prefix, write_directory, template);

        assert_eq!(actual[0].0, "fish/functions/ar.fish");
        assert_eq!(actual[0].1, "ar gar");
    }

    #[test]
    fn the_directory_is_customisable() {
        let gnu_functions = vec!["ar"];
        let function_prefix = "g";
        let write_directory = "something/else";
        let template = "___GNU_CMD___ ___PREFIXED_COMMAND___";
        let actual =
            generate_gnu_utils_function(gnu_functions, function_prefix, write_directory, template);

        assert_eq!(actual[0].0, "something/else/ar.fish");
        assert_eq!(actual[0].1, "ar gar");
    }
}
